****************************************************
How the concept of a class links to a smart contract
****************************************************

Smart contracts in C# are intrinsically linked to object-oriented design even when they are very basic.

Being object-oriented also enables smart contracts to inherit methods and properties. This allows a level of basic smart contract functionality to be readily available to all smart contracts via base class methods and properties.

The smart contract constructor
---------------------------------

Deployment of a smart contract involves calling the constructor for the smart contract class. This is where any initialization of the smart contract should take place. Before we look at what the constructor does, let's examine its syntax.

Firstly, as previously mentioned, all smart contracts in C# inherit from ``SmartContract``. It is mandatory to include the following line at the top of the file:

::

    using Stratis.SmartContracts;

This allows a smart contract to inherit from the base ``SmartContract`` class.

The class declaration specifies that your class inherits from the ``SmartContract`` class:

::

    [Deploy]
    public class HelloWorld : SmartContract
    {
        ...
    }

The ``[Deploy]`` attribute only needs to be specified when more than one class is declared in the file, but specifying it anyway is fine. When a smart contract is deployed, the entire C# file is compiled into Common Intermediate Language (CIL), which is then supplied to the deployment call.

The first parameter passed to the constructor must be an object conforming to the ``ISmartContractState`` interface:

::

    public HelloWorld(ISmartContractState smartContractState)
        : base(smartContractState)
    {
        ...
    }

You can define additional parameters, and when you deploy the smart contract, you only need to specify arguments for the parameters you defined. The first parameter is handled internally. The ``base`` constructor (the ``SmartContract`` constructor) must also be called with the ``ISmartContractState`` parameter, and you can see this in the code above. The name of the first parameter could theoretically be changed, but ``smartContractState`` will work fine.

************************************
Greeting - a smart contract property
************************************

In our Hello World example, we do one thing and that is initialize the ``Greeting`` property:

::

    this.Greeting = "Hello World!";

The actual line initiating the ``Greeting`` property is fairly self-explanatory. Let's take a look at the property getter and setters.

::

    private string Greeting
    {
        get 
        {
            return this.PersistentState.GetString("Greeting");
        }
        set
        {
            this.PersistentState.SetString("Greeting", value);
        }
    }

The ``PersistentState`` property belongs to the ``SmartContract`` class and facilitates the storage and retrieval of data (in this case a string). Smart contract data is stored as a series of key-value pairs and in this case **Greeting** is used as the key. The ``Greeting`` property is marked as private as there is no need for it to be accessed from anywhere other than inside the smart contract. Unlike methods, C# properties on a smart contract cannot be called even if they are public.

SayHello() - a smart contract method
--------------------------------------

Finally, let's look at the simple method ``Greeting()``, which returns the "Hello World!" string.

::

    public string SayHello()
    {
        return this.Greeting;
    }

As you can see, this method just accesses the ``Greeting`` property.

.. _compiling-the-hello-world-smart-contract-dev:

****************************************
Compiling the Hello World smart contract
****************************************

A smart contract in C# must be compiled into CIL before it can be deployed. For this, we are going to use the `Stratis Smart Contract Tool <https://github.com/stratisproject/Stratis.SmartContracts.Tools.Sct>`_. 

::

	git clone https://github.com/stratisproject/Stratis.SmartContracts.Tools.Sct

.. note:: The Stratis Smart Contract Tool for compiling contracts compatible with the Developer Edition (DLT) can be found `here <https://github.com/stratisproject/StratisBitcoinFullNode/tree/DeveloperEdition-DLT/src/Stratis.SmartContracts.Tools.Sct>`_.

Execute the following command: ``dotnet run validate [PATH_TO_SMART_CONTRACT] -sb``. A relative path to ```HelloWorld.cs`` in your Stratis Full Node repository should work fine.

To see more information on the options available for the sct ``validate`` command, use the following command: ``dotnet run validate --help`` 

To see the general help on the sct, use the following command: ``dotnet run --help``

The output from executing the Smart Contract validation will look like the below:

::

	Smart Contract Validator

	Compiling ..\HelloWorld.cs...
	Compilation OK

	Building ModuleDefinition
	ModuleDefinition built successfully

	Validating file ..\HelloWorld.cs...

	====== Smart Contract Validation results for file ..\HelloWorld.cs ======
	Compilation Result
	Compilation OK: True

	Format Validation Result
	Format Valid: True

	Determinism Validation Result
	Determinism Valid: True



	Hash
	e6cff849009d3bd01d2db606a10bb5a792ce4a0a995f33a2621bcc1c06d8a766

	ByteCode
	
	======

.. note:: If you are building the Stratis Smart Contract Tool from source and have previously cloned the repository, please ensure that before you compile any smart contracts, you sync the repository to the latest version of the source code and rebuild the tool.

************************
Interact with the Wallet
************************

Begin by making sure that you have the Local Smart Contract network running. 

::

	docker container ls


You should now be in possession of 100,000,000 CRS-TEST tokens within your wallet! You can confirm this by interacting with the Balance endpoint, but first, let's confirm the name of the wallet.

::

	curl -X GET "http://localhost:37223/api/Wallet/list-wallets" -H "accept: application/json"
	
You should get a response like the below.

::

	{
	"walletNames": [
		"Hackathon_1"
	]
	}

.. note:: For the purposes of this guide we are interacting with ``node_1``.

The balance can now be queried by listing the addresses related to the previously discovered wallet.

::
	
	curl -X GET "http://localhost:37223/api/Wallet/addresses?WalletName=Hackathon_1&AccountName=account%200" -H "accept: application/json" | jq '.'

.. note:: jq has been utilised to prettify the JSON repsonse.

The above GET will return a list of addresses, we need to find the address that has reiceved the pre-mine amount, this will be evident by the ``amountConfirmed`` value.

::
	
	{
      "address": "CZutRsBK78fWu8aY9u9K63v1zH7AmffnAc",
      "isUsed": true,
      "isChange": false,
      "amountConfirmed": 1000000000000000,
      "amountUnconfirmed": 0,
      "addresses": null
    }


.. _deploying-the-hello-world-smart-contract-dev:

*********************************
Deploying the HelloWorld contract
*********************************

Now we have interacted with the wallet, we have an address that we know has a balance to fund the associated costs with deploying the contract in question.

The contract can be deployed by utilising the SmartContractWallet/Create endpoint.

::
	
	curl -X POST "http://localhost:37223/api/SmartContractWallet/create" -H "accept: application/json" -H "Content-Type: application/json-patch+json" -d "{ \"walletName\": \"Hackathon_1\", \"amount\": \"0\", \"feeAmount\": \"0.001\", \"password\": \"stratis\", \"contractCodegasPrice\": 100, \"gasLimit\": 100000, \"sender\": \"CZutRsBK78fWu8aY9u9K63v1zH7AmffnAc\"}"
	
A prettified instance of the data passed can be seen below.

::

	{
		"walletName": "Hackathon_1",
		"amount": "0",
		"feeAmount": "0.001",
		"password": "stratis",	
		"contractCode
		"gasPrice": 100,
		"gasLimit": 100000,
		"sender": "CZutRsBK78fWu8aY9u9K63v1zH7AmffnAc"
	}

.. note:: The password for all wallets in the Developer Edition is **stratis**.

The response recieved will be a Transaction ID.

::

	"8241686211eb182a0a153f9b2e9440a703fd848eb92c26e18be403090da05f7b"

This Transaction ID can be used to confirm that the contract deployment has been accepted and also provide information about the deployment. This is done by interacting with the /SmartContracts/receipt endpoint.

::

	curl -X GET "http://localhost:37223/api/SmartContracts/receipt?txHash=8241686211eb182a0a153f9b2e9440a703fd848eb92c26e18be403090da05f7b" -H "accept: application/json"
	
The response of this will tell you several things, the amount of GAS that was consumed, the status of the deployment and importantly, the address of the deployed contract.

::

	{
		"transactionHash": "8241686211eb182a0a153f9b2e9440a703fd848eb92c26e18be403090da05f7b",
		"blockHash": "bd033d197b6f6f7b7962ef2a42c29e2be6a7de9d278a0aa4d61e335bcb4ddb61",
		"postState": "1bed6aa13b7eb3a8714a2c81bde8c7442afbb8695a9cb3be6f59f216bbc90617",
		"gasUsed": 12428,
		"from": "CZutRsBK78fWu8aY9u9K63v1zH7AmffnAc",
		"to": null,
		"newContractAddress": "CY6DJQ9SgDpm4caxTWoVGuJRLBZ1XnD5fe",
		"success": true,
		"returnValue": null,
		"bloom": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		"error": null,
		"logs": []
	}

We have now deployed the contract and verified the contract address, in this instance we can see that the address is ``CY6DJQ9SgDpm4caxTWoVGuJRLBZ1XnD5fe``.

*****************************
Calling the SayHello() method
*****************************

We are going to call the ``SayHello()`` method, to do this we need to interact with the contract.

::

	curl -X POST "http://localhost:37223/api/contract/CY6DJQ9SgDpm4caxTWoVGuJRLBZ1XnD5fe/method/SayHello" -H "accept: application/json" -H "GasPrice: 100" -H "GasLimit: 100000" -H "Amount: 0" -H "FeeAmount: 0.01" -H "WalletName: Hackathon_1" -H "WalletPassword: stratis" -H "Sender: CZutRsBK78fWu8aY9u9K63v1zH7AmffnAc" -H "Content-Type: application/json" -d "{}"

.. note:: It's important that we specify the ``newContractAddress`` in the URI and use an address that has a sufficient balance for the ``sender`` paramater.

The response will tell us if the call was successfull and will also provide us with a Transaction ID to query.

::

	{
		"fee": 11000000,
		"hex": "0100000002088b9aee9e7e1f824678b90d034ab4bef6f4745fda3b5085c5a01e165ed7ca96000000006a47304402202fdb8e52a4d4543206b64c3860f0f46c92b3f02733e6f95284e763a9261d4fd902207f65c8ff1ab2b5b96820b4caa6a7d3e9643f5aa04c8935f2336049727683b93f012102d8d7e4e8c427038596e69f4ce944986eeeb1fc3eb7327fe7b39d71eb6b72f0a2ffffffff6096e216aeb1b12a4fe8b4fd7c7f05490d53cb6ca56cc391d88b1b9170d7bbb4010000006a4730440220309a929541f1680108c758a8af789e82cfe45cce0a13787f4c694752a07de651022020c9ffe6454cef09b7479f44a9f0af798c7fee47ddbdad5d283de60a931ab475012102d8d7e4e8c427038596e69f4ce944986eeeb1fc3eb7327fe7b39d71eb6b72f0a2ffffffff0200b60300000000001976a914bf64d5ee5f797568ac5624053fda4a9ee52a5e3f88ac000000000000000034c1010000006400000000000000a086010000000000ab687f2579fe17d447e20c6d188590a766dd9a54ca8853617948656c6c6f8000000000",
		"message": "Your CALL method SayHello transaction was successfully built.",
		"success": true,
		"transactionId": "67c707f5e85029e9f38586e28caed900b4653cc04db2d8c76780197472287a84"
	}

From the above we can see that the call was successfull and we have been provided a Transaction ID. Pass this Transaction ID as a paramater to the /SmartContracts/receipt endpoint.

::

	curl -X GET "http://localhost:37223/api/SmartContracts/receipt?txHash=67c707f5e85029e9f38586e28caed900b4653cc04db2d8c76780197472287a84" -H "accept: application/json"

The response from the above will give us a summary of the transaction but also a response from the call that was made.

::

	{
		"transactionHash": "67c707f5e85029e9f38586e28caed900b4653cc04db2d8c76780197472287a84",
		"blockHash": "67e058904b32ad9546713788105d0d5d2d7283a0e317adfad522e59f51e749b6",
		"postState": "1bed6aa13b7eb3a8714a2c81bde8c7442afbb8695a9cb3be6f59f216bbc90617",
		"gasUsed": 10038,
		"from": "CZutRsBK78fWu8aY9u9K63v1zH7AmffnAc",
		"to": "CY6DJQ9SgDpm4caxTWoVGuJRLBZ1XnD5fe",
		"newContractAddress": null,
		"success": true,
		"returnValue": "Hello World!",
		"bloom": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		"error": null,
		"logs": []
	}

``Hello World!`` is returned from the call, as expected.

Now we have deployed a basic HellowWorld contract, we can now look at extending the functionality.
